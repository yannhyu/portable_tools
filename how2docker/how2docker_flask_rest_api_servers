login as airflow/airflow

https://hub.docker.com/r/frolvlad/flask-restplus-server-example/

mkdir flask-restplus-server-example
cd flask-restplus-server-example

+++++++++++++++++++++++++++++++++++++

airflow@mllxv-yu:~/flask-restplus-server-example$ docker version
Client:
 Version:      1.11.2
 API version:  1.23
 Go version:   go1.6.2
 Git commit:   b9f10c9
 Built:        Thu, 16 Jun 2016 21:17:51 +1200
 OS/Arch:      linux/amd64

Server:
 Version:      1.11.2
 API version:  1.23
 Go version:   go1.6.2
 Git commit:   b9f10c9
 Built:        Thu, 16 Jun 2016 21:17:51 +1200
 OS/Arch:      linux/amd64

airflow@mllxv-yu:~/flask-restplus-server-example$ docker-compose version
docker-compose version 1.5.2, build unknown
docker-py version: 1.8.0
CPython version: 2.7.12
OpenSSL version: OpenSSL 1.0.2g  1 Mar 2016
airflow@mllxv-yu:~/flask-restplus-server-example$ 

+++++++++++++++++++++++++++++++++++++

docker pull frolvlad/flask-restplus-server-example

+++++++++++++++++++++++++++++++++++++

docker run -it --rm --publish 5000:5000 frolvlad/flask-restplus-server-example

+++++++++++++++++++++++++++++++++++++

without docker:

git clone https://github.com/frol/flask-restplus-server-example.git

Setup Environment
It is recommended to use virtualenv or Anaconda/Miniconda to manage Python
dependencies. Please, learn details yourself.

You will need invoke package to work with everything related to this project.

$ pip install invoke colorlog
pip install lockfile

Run Server
NOTE: All dependencies and database migrations will be automatically handled,
so go ahead and turn the server ON! (Read more details on this in Tips section)

$ invoke app.run
Quickstart
Open online interactive API documentation:
http://127.0.0.1:5000/api/v1/

Autogenerated swagger config is always available from
http://127.0.0.1:5000/api/v1/swagger.json

example.db (SQLite) includes 2 users:

Admin user root with password q
Regular user user with password w
NOTE: Use On/Off switch in documentation to sign in.

Authentication Details
This example server features OAuth2 Authentication protocol support, but don't
be afraid of it! If you learn it, OAuth2 will save you from a lot of troubles.

Here is how you authenticate using cURL:

$ curl 'http://127.0.0.1:5000/auth/oauth2/token?grant_type=password&client_id=documentation&username=root&password=q'
{
    "token_type": "Bearer",
    "access_token": "oqvUpO4aKg5KgYK2EUY2HPsbOlAyEZ",
    "refresh_token": "3UTjLPlnomJPx5FvgsC2wS7GfVNrfH",
    "scope": "teams:read users:read users:write teams:write"
}
That is it! You grab the access_token and put it into Authorization header
to request "protected" resources:

$ curl --header 'Authorization: Bearer oqvUpO4aKg5KgYK2EUY2HPsbOlAyEZ' 'http://127.0.0.1:5000/api/v1/users/me'
{
    "id": 1,
    "username": "root",
    "email": "root@localhost",
    "first_name": "",
    "middle_name": "",
    "last_name": "",
    "is_active": true,
    "is_regular_user": true,
    "is_admin": true,
    "created": "2016-10-20T14:00:35.912576+00:00",
    "updated": "2016-10-20T14:00:35.912602+00:00"
}
Tips
Once you have invoke, you can learn all available commands related to this
project from:

$ invoke --list
Learn more about each command with the following syntax:

$ invoke --help <task>
For example:

$ invoke --help app.run
Usage: inv[oke] [--core-opts] app.run [--options] [other tasks here ...]

Docstring:
  Run DDOTS RESTful API Server.

Options:
  -d, --[no-]development
  -h STRING, --host=STRING
  -i, --[no-]install-dependencies
  -p, --port
  -u, --[no-]upgrade-db
Use the following command to enter ipython shell (ipython must be installed):

$ invoke app.env.enter
app.run and app.env.enter tasks automatically prepare all dependencies
(using pip install) and migrate database schema to the latest version.

Database schema migration is handled via app.db.* tasks group. The most
common migration commands are app.db.upgrade (it is automatically run on
app.run), and app.db.migrate (creates a new migration).

Useful Links
"The big Picture" -
short yet complete idea about how the modern apps should talk.
"Please. Don't PATCH Like An Idiot."
"Best Practices for Designing a Pragmatic RESTful API"
"My take on RESTful authentication"


++++++++++++++++++++++++++++++++++++++++++++++++

trouble:

[2016-11-30 11:42:56,830] ERROR in __init__: You have to have `local_config.py` or `local_config/__init__.py` in order to use the default 'local' Flask Config. Alternatively, you may set `FLASK_CONFIG` environment variable to one of the following options: development, production, testing.
2016-11-30 11:42:56,830 [ERROR] [app] You have to have `local_config.py` or `local_config/__init__.py` in order to use the default 'local' Flask Config. Alternatively, you may set `FLASK_CONFIG` environment variable to one of the following options: development, production, testing.


export FLASK_CONFIG='development'

+++++++++++++++++++++++++++++++++++++++++++++++++++

curl --header 'Authorization: Bearer Oys42R08fTZnN7k8HuSX5irujZ3imb' 'http://127.0.0.1:5000/api/v1/users/me'